/**
 * @file Firebase Security Rules for KonusOyna Application
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model for user profiles and progress data,
 *                 while allowing public read access to tasks.
 *
 * @dataStructure
 *  - /users/{userId}: Stores individual user profiles, accessible only by the user themselves.
 *  - /tasks/{taskId}: Stores tasks, publicly readable but writable only by the task's teacher (owner).
 *  - /users/{userId}/progress/{progressId}: Stores user-specific progress on tasks, accessible only by the user.
 *
 * @keySecurityDecisions
 *  - Users cannot list all users (no `list` on /users).
 *  - Public read access is granted to the `/tasks` collection to enable task discovery.
 *  - The `teacherId` field in the `/tasks` collection is used to enforce ownership for write operations.
 *  - The `userId` field in the `/users/{userId}/progress/{progressId}` collection is used to enforce ownership and ensure data consistency.
 *
 * @denormalizationForAuthorization
 *  - The `tasks` documents denormalize the `teacherId` to allow direct ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing only the authenticated user to read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile document at /users/user_abc
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, and delete their own profile document at /users/user_abc
     * @deny (create, get, update, delete) - User with UID 'user_xyz' cannot access the profile document at /users/user_abc
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Users can only manage their own profiles.
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to tasks, but restricts write access to the task's teacher (owner).
     * @path /tasks/{taskId}
     * @allow (get, list) - Any user, authenticated or not, can read tasks
     * @allow (create) - User with UID 'teacher_abc' can create a task with teacherId: 'teacher_abc'
     * @allow (update, delete) - User with UID 'teacher_abc' can update/delete a task where resource.data.teacherId == 'teacher_abc'
     * @deny (create) - User with UID 'student_xyz' cannot create a task with teacherId: 'teacher_abc'
     * @deny (update, delete) - User with UID 'student_xyz' cannot update/delete a task where resource.data.teacherId == 'teacher_abc'
     * @principle Allows public read access while enforcing ownership for write operations.
     */
    match /tasks/{taskId} {
      // Anyone can read tasks.
      allow get, list: if true;

      // Only the teacher who created the task can modify it.
      allow create: if isSignedIn() && request.resource.data.teacherId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.teacherId);
    }

    /**
     * @description Secures user progress data, allowing only the authenticated user to read and write their own progress data.
     * @path /users/{userId}/progress/{progressId}
     * @allow (create) - User with UID 'user_abc' can create a progress document under /users/user_abc/progress/{progressId}
     * @allow (get, update, delete, list) - User with UID 'user_abc' can access their own progress documents
     * @deny (create, get, update, delete, list) - User with UID 'user_xyz' cannot access progress documents under /users/user_abc
     * @principle Enforces strict user ownership for all operations on progress data.
     */
    match /users/{userId}/progress/{progressId} {
      // Only the user can manage their own progress data.
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}