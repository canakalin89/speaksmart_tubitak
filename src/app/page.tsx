'use client';

import { useState, useRef, useEffect, useMemo } from 'react';
import Image from 'next/image';
import {
  genAiAssistedFeedback,
  GenAiAssistedFeedbackOutput,
} from '@/ai/flows/gen-ai-assisted-feedback';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Progress } from "@/components/ui/progress";
import { Mic, MicOff, Languages, FileUp, History, Users, Atom, CreativeCommons, User as UserIcon, Building, Link as LinkIcon } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { Mascot, MascotLoading } from '@/components/mascot';
import { ScrollArea } from '@/components/ui/scroll-area';
import { useAuth, useUser, useCollection, useMemoFirebase, useFirestore } from '@/firebase';
import { initiateAnonymousSignIn } from '@/firebase/non-blocking-login';
import { collection } from 'firebase/firestore';
import { formatDistanceToNow } from 'date-fns';
import { tr } from 'date-fns/locale';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

const content = {
  tr: {
    title: 'SpeakSmart',
    subtitle: 'Türkiye Yüzyılı Maarif Modeli ile İngilizce konuşma pratiği yapın.',
    step1: 'Görevinizi Seçin ve Konuşun',
    step1Desc: 'Aşağıdaki görevlerden birini seçin, ardından sesinizi kaydedin veya yükleyin.',
    taskSelectPlaceholder: 'Bir konuşma görevi seçin...',
    or: 'VEYA',
    startRecording: 'Kayda Başla',
    stopRecording: 'Kaydı Durdur',
    uploadAudio: 'Ses Yükle',
    recording: 'Kayıt yapılıyor...',
    howItWorks: 'Nasıl Çalışır?',
    howItWorksSteps: [
      'Değerlendirilmesini istediğiniz konuşma görevini yukarıdaki metin alanına yazın.',
      'Sesinizi kaydedin veya bir ses dosyası yükleyin.',
      'Yapay zeka, konuşmanızı analiz ederek size telaffuz, akıcılık ve dilbilgisi üzerine detaylı geri bildirimler sunsun.',
    ],
    step2: 'Sonuçları İnceleyin',
    step2Desc: 'Yapay zeka tarafından oluşturulan analiz ve gelişim önerileri.',
    analyzing: 'Analiz Ediliyor...',
    analyzingDesc: 'Yapay zeka konuşmanızı değerlendiriyor, lütfen bekleyin.',
    readyToStart: 'Başlamaya Hazır mısınız?',
    readyToStartDesc: 'Görevinizi seçip konuşmaya başladıktan sonra analiz sonuçlarınız burada görünecek.',
    overallScore: 'Genel Puan',
    detailedScores: 'Detaylı Puanlar',
    rapport: 'Dinleyici ile Bağ Kurma',
    organisation: 'Organizasyon',
    delivery: 'Sunum',
    languageUse: 'Dil Kullanımı',
    creativity: 'Yaratıcılık',
    transcript: 'Konuşma Metni',
    improvementAreas: 'Gelişim Önerileri',
    overallFeedback: 'Genel Öneri',
    detailedAnalysis: 'Detaylı Analiz',
    toastGenerating: 'Geri bildirim oluşturuluyor...',
    toastGeneratingDesc: 'Yapay zeka konuşmanızı analiz ediyor.',
    toastReady: 'Geri Bildirim Hazır!',
    toastReadyDesc: 'Yapay zeka destekli geri bildiriminiz oluşturuldu.',
    toastError: 'Bir Hata Oluştu',
    toastErrorDesc: 'Yapay zekadan geri bildirim alınamadı. Lütfen tekrar deneyin.',
    toastMicError: 'Mikrofon Hatası',
    toastMicErrorDesc: 'Mikrofona erişilemedi. Lütfen tarayıcı izinlerinizi kontrol edin.',
    footerRights: 'Tüm hakları saklıdır.',
    tubitak: 'TÜBİTAK 4006-B Projesi',
    tubitakDesc: 'Bu proje, Tekirdağ Kapaklı Aziz Sancar Anadolu Lisesi tarafından yürütülen TÜBİTAK 4006-B Bilim Fuarları Destekleme Programı kapsamında geliştirilmiştir.',
    supporters: 'Destekleyen Kurumlar',
    social: 'Sosyal Medya',
    usefulLinks: 'Faydalı Linkler',
    kapakliMeb: 'Kapaklı İlçe Milli Eğitim Müdürlüğü',
    continueAsGuest: 'Misafir Olarak Devam Et',
    welcomeGuest: 'Hoş Geldin, Misafir!',
    loginToSave: 'İlerlemenizi kaydetmek için giriş yapın veya kaydolun.',
    welcome: 'Hoş Geldin',
    pastResults: 'Geçmiş Sonuçlarım',
    noPastResults: 'Henüz bir deneme yapmadınız.',
    viewResult: 'Sonucu Görüntüle'
  },
  en: {
    title: 'SpeakSmart',
    subtitle: 'Practice English speaking with the Turkish Century Maarif Model.',
    step1: 'Select Your Task and Speak',
    step1Desc: 'Choose a task from the list below, then record or upload your audio.',
    taskSelectPlaceholder: 'Select a speaking task...',
    or: 'OR',
    startRecording: 'Start Recording',
    stopRecording: 'Stop Recording',
    uploadAudio: 'Upload Audio',
    recording: 'Recording...',
    howItWorks: 'How It Works',
    howItWorksSteps: [
      'Type the speaking task you want to be evaluated on in the text area above.',
      'Record your voice or upload an audio file.',
      'Let the AI analyze your speech and provide you with detailed feedback on pronunciation, fluency, and grammar.',
    ],
    step2: 'Review Your Results',
    step2Desc: 'Analysis and improvement suggestions generated by the AI.',
    analyzing: 'Analyzing...',
    analyzingDesc: 'The AI is evaluating your speech, please wait.',
    readyToStart: 'Ready to Start?',
    readyToStartDesc: 'Your analysis results will appear here after you select your task and start speaking.',
    overallScore: 'Overall Score',
    detailedScores: 'Detailed Scores',
    rapport: 'Rapport with Audience',
    organisation: 'Organisation',
    delivery: 'Delivery',
    languageUse: 'Language Use',
    creativity: 'Creativity',
    transcript: 'Speech Transcript',
    improvementAreas: 'Improvement Areas',
    overallFeedback: 'Overall Feedback',
    detailedAnalysis: 'Detailed Analysis',
    toastGenerating: 'Generating feedback...',
    toastGeneratingDesc: 'The AI is analyzing your speech.',
    toastReady: 'Feedback Ready!',
    toastReadyDesc: 'Your AI-powered feedback has been generated.',
    toastError: 'An Error Occurred',
    toastErrorDesc: 'Could not get feedback from the AI. Please try again.',
    toastMicError: 'Microphone Error',
    toastMicErrorDesc: 'Could not access the microphone. Please check your browser permissions.',
    footerRights: 'All rights reserved.',
    tubitak: 'TÜBİTAK 4006-B Project',
    tubitakDesc: 'This project was developed within the scope of the TÜBİTAK 4006-B Science Fairs Support Program, conducted by Tekirdağ Kapaklı Aziz Sancar Anatolian High School.',
    supporters: 'Supporters',
    social: 'Social Media',
    usefulLinks: 'Useful Links',
    kapakliMeb: 'Kapaklı District Directorate of National Education',
    continueAsGuest: 'Continue as Guest',
    welcomeGuest: 'Welcome, Guest!',
    loginToSave: 'Log in or sign up to save your progress.',
    welcome: 'Welcome',
    pastResults: 'Past Results',
    noPastResults: 'You haven\'t made any attempts yet.',
    viewResult: 'View Result'
  }
};

const predefinedTasks = {
  tr: [
    { id: 'task-1', text: 'Bir iş görüşmesinde kendinizi tanıtın.' },
    { id: 'task-2', text: 'En sevdiğiniz filmi ve neden sevdiğinizi anlatın.' },
    { id: 'task-3', text: 'Hayalinizdeki tatili tarif edin.' },
    { id: 'task-4', text: 'Bir restoranda nasıl sipariş verileceğini rol yaparak gösterin.' },
    { id: 'task-5', text: 'Size verilen bir görseli detaylı bir şekilde betimleyin.' }
  ],
  en: [
    { id: 'task-1', text: 'Introduce yourself in a job interview.' },
    { id: 'task-2', text: 'Describe your favorite movie and why you love it.' },
    { id: 'task-3', text: 'Describe your dream vacation.' },
    { id: 'task-4', text: 'Role-play ordering food at a restaurant.' },
    { id: 'task-5', text: 'Describe a picture you are given in detail.' }
  ]
}


export default function Home() {
  const [taskDescription, setTaskDescription] = useState('');
  const [isRecording, setIsRecording] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [feedback, setFeedback] = useState<GenAiAssistedFeedbackOutput | null>(
    null
  );
  const [language, setLanguage] = useState<'tr' | 'en'>('tr');
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const audioChunksRef = useRef<Blob[]>([]);
  const fileInputRef = useRef<HTMLInputElement | null>(null);
  const { toast } = useToast();
  const auth = useAuth();
  const { user, isUserLoading } = useUser();
  const firestore = useFirestore();

  const t = content[language];
  const tasks = predefinedTasks[language];

  const progressCollectionRef = useMemoFirebase(() => {
    if (!firestore || !user?.uid) return null;
    return collection(firestore, 'users', user.uid, 'progress');
  }, [firestore, user?.uid]);

  const { data: progressData } = useCollection<GenAiAssistedFeedbackOutput>(progressCollectionRef);
  
  const handleAudioAnalysis = async (base64Audio: string) => {
    setIsLoading(true);
    setFeedback(null);
    
    try {
      toast({ title: t.toastGenerating, description: t.toastGeneratingDesc });
      const currentTask = tasks.find(task => task.id === taskDescription) || { id: `custom-${Date.now()}`, text: taskDescription };

      const feedbackResult = await genAiAssistedFeedback({
        audio: base64Audio,
        taskDescription: currentTask.text,
        language,
        userId: user?.uid,
        taskId: currentTask.id
      });
      setFeedback(feedbackResult);
      toast({
        title: t.toastReady,
        description: t.toastReadyDesc,
      });

    } catch (error: any) {
      console.error('AI processing error:', error);
      toast({
        variant: 'destructive',
        title: t.toastError,
        description: error.message || t.toastErrorDesc,
      });
    } finally {
      setIsLoading(false);
    }
  }

  const handleStartRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      mediaRecorderRef.current = new MediaRecorder(stream);
      audioChunksRef.current = [];

      mediaRecorderRef.current.ondataavailable = event => {
        audioChunksRef.current.push(event.data);
      };

      mediaRecorderRef.current.onstop = () => {
        setIsRecording(false);
        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });
        mediaRecorderRef.current?.stream.getTracks().forEach(track => track.stop());

        const reader = new FileReader();
        reader.readAsDataURL(audioBlob);
        reader.onloadend = async () => {
          const base64Audio = reader.result as string;
          handleAudioAnalysis(base64Audio);
        };
      };

      mediaRecorderRef.current.start();
      setIsRecording(true);
      setFeedback(null);
    } catch (error) {
      console.error('Error accessing microphone:', error);
      toast({
        variant: "destructive",
        title: t.toastMicError,
        description: t.toastMicErrorDesc,
      });
    }
  };

  const handleStopRecording = () => {
    if (
      mediaRecorderRef.current &&
      mediaRecorderRef.current.state === 'recording'
    ) {
      mediaRecorderRef.current.stop();
    }
  };

  const toggleRecording = () => {
    if (isRecording) {
      handleStopRecording();
    } else {
      handleStartRecording();
    }
  };
  
  const toggleLanguage = () => {
    setLanguage(prev => prev === 'tr' ? 'en' : 'tr');
  }

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const base64Audio = e.target?.result as string;
        if (base64Audio) {
          handleAudioAnalysis(base64Audio);
        }
      };
      reader.readAsDataURL(file);
    }
     if(fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const triggerFileSelect = () => fileInputRef.current?.click();

  const handleGuestLogin = () => {
    initiateAnonymousSignIn(auth);
  };

  const ScoreDisplay = ({ score, label }: { score: number, label: string }) => {
    const [progress, setProgress] = useState(0);

    useEffect(() => {
      const timer = setTimeout(() => setProgress(score), 300);
      return () => clearTimeout(timer);
    }, [score]);
    
    const getScoreColor = (score: number) => {
      if (score < 50) return 'red';
      if (score < 75) return 'yellow';
      return 'green';
    }
    
    const color = getScoreColor(score);
    
    const indicatorColorClass = {
        'red': 'bg-red-500',
        'yellow': 'bg-yellow-500',
        'green': 'bg-green-500'
    }[color];
    
    const textColorClass = {
        'red': 'text-red-500',
        'yellow': 'text-yellow-500',
        'green': 'text-green-500'
    }[color];


    return (
      <div className="space-y-2">
        <div className="flex justify-between items-baseline">
          <span className="font-medium text-sm text-foreground/80">{label}</span>
          <span className={`text-base font-bold ${textColorClass}`}>{score}</span>
        </div>
        <Progress value={progress} indicatorClassName={indicatorColorClass} className="h-2" />
      </div>
    );
  };
  
  const OverallScoreIndicator = ({ score } : {score: number}) => {
    const circumference = 2 * Math.PI * 45; // radius = 45
    const offset = circumference - (score / 100) * circumference;

    return (
      <div className="relative flex items-center justify-center w-32 h-32">
        <svg className="absolute top-0 left-0 w-full h-full" viewBox="0 0 100 100">
          <circle
            className="text-secondary"
            strokeWidth="10"
            stroke="currentColor"
            fill="transparent"
            r="45"
            cx="50"
            cy="50"
          />
          <circle
            className="text-primary"
            strokeWidth="10"
            stroke="currentColor"
            fill="transparent"
            r="45"
            cx="50"
            cy="50"
            style={{
              strokeDasharray: circumference,
              strokeDashoffset: offset,
              transition: 'stroke-dashoffset 0.5s ease-out',
              transform: 'rotate(-90deg)',
              transformOrigin: '50% 50%'
            }}
          />
        </svg>
        <span className="text-3xl font-bold text-primary">{score}</span>
      </div>
    );
  };

  const canSubmit = taskDescription.trim().length > 0;
  const isReady = !isUserLoading && user;

  const sortedProgressData = useMemo(() => {
    if (!progressData) return [];
    return [...progressData].sort((a: any, b: any) => {
        const dateA = a.createdAt?.toDate?.() || 0;
        const dateB = b.createdAt?.toDate?.() || 0;
        return dateB - dateA;
    });
  }, [progressData]);

  return (
    <div className="flex flex-col min-h-screen bg-background">
      <header className="bg-card shadow-sm sticky top-0 z-10 border-b">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-4 flex justify-between items-center">
            <div className="flex items-center gap-3">
                <Image src="http://azizsancaranadolu.meb.k12.tr/meb_iys_dosyalar/59/11/765062/resimler/2025_06/03222921_logolar3.jpg" alt="Okul Logosu" width={40} height={40} className="rounded-full object-contain" />
                <h1 className="text-2xl font-bold text-foreground tracking-tight">{t.title}</h1>
            </div>
            <div className="flex items-center gap-4">
              <p className="text-sm text-muted-foreground hidden md:block">
                {user ? `${t.welcome}, ${user.isAnonymous ? 'Misafir' : user.email}` : t.subtitle}
              </p>
              <Button variant="ghost" size="icon" onClick={toggleLanguage} aria-label="Change language">
                <Languages className="w-5 h-5"/>
              </Button>
            </div>
        </div>
      </header>

      <main className="flex-grow container mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {!isReady && !isUserLoading && (
          <Card className="max-w-md mx-auto text-center">
            <CardHeader>
              <CardTitle>{t.welcomeGuest}</CardTitle>
              <CardDescription>{t.loginToSave}</CardDescription>
            </CardHeader>
            <CardContent>
              <Button onClick={handleGuestLogin} size="lg">
                <UserIcon className="mr-2" />
                {t.continueAsGuest}
              </Button>
            </CardContent>
          </Card>
        )}

        {isUserLoading && (
           <div className="text-center space-y-4">
              <MascotLoading />
              <h3 className="text-xl font-semibold text-primary">Yükleniyor...</h3>
            </div>
        )}
        
        {isReady && (
          <div className="grid grid-cols-1 lg:grid-cols-5 gap-8">
            <div className="lg:col-span-2 flex flex-col gap-8">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2"><span className="flex items-center justify-center w-6 h-6 bg-primary text-primary-foreground rounded-full text-sm font-bold">1</span><span>{t.step1}</span></CardTitle>
                  <CardDescription>{t.step1Desc}</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <Select onValueChange={setTaskDescription} value={taskDescription}>
                    <SelectTrigger>
                      <SelectValue placeholder={t.taskSelectPlaceholder} />
                    </SelectTrigger>
                    <SelectContent>
                      {tasks.map(task => (
                        <SelectItem key={task.id} value={task.id}>{task.text}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>

                   <div className="flex items-center gap-4">
                      <div className="flex-grow border-t"></div>
                      <span className="text-xs text-muted-foreground">{t.or}</span>
                      <div className="flex-grow border-t"></div>
                  </div>
                  <div className="flex gap-4">
                    <Button
                      onClick={toggleRecording}
                      disabled={!canSubmit || isLoading}
                      className="w-full"
                      size="lg"
                    >
                      {isRecording ? (
                        <><MicOff className="mr-2"/> {t.stopRecording}</>
                      ) : (
                        <><Mic className="mr-2"/> {t.startRecording}</>
                      )}
                    </Button>
                    <input type="file" ref={fileInputRef} onChange={handleFileChange} className="hidden" accept="audio/*" />
                    <Button 
                      onClick={triggerFileSelect} 
                      disabled={!canSubmit || isLoading || isRecording} 
                      variant="outline" 
                      size="lg"
                      className="w-full"
                    >
                      <FileUp className="mr-2"/> {t.uploadAudio}
                    </Button>
                  </div>
                  {isRecording && (
                      <div className="flex items-center justify-center text-sm text-red-500 animate-pulse">
                          <div className="w-2 h-2 rounded-full bg-red-500 mr-2 animate-ping"></div>
                          {t.recording}
                      </div>
                  )}
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2 text-base"><History className="w-5 h-5 text-primary"/>{t.pastResults}</CardTitle>
                </CardHeader>
                <CardContent>
                  <ScrollArea className="h-48">
                    {sortedProgressData && sortedProgressData.length > 0 ? (
                      <div className="space-y-4">
                        {sortedProgressData.map((item) => (
                           <div key={item.id} className="flex items-center justify-between p-3 bg-secondary/50 rounded-lg">
                             <div className="flex-grow overflow-hidden">
                               <p className="font-semibold truncate text-sm">{(item as any).taskDescription}</p>
                               <p className="text-xs text-muted-foreground">
                                { (item as any).createdAt ? formatDistanceToNow((item as any).createdAt.toDate(), { addSuffix: true, locale: language === 'tr' ? tr : undefined }) : ''}
                               </p>
                             </div>
                             <div className="flex items-center gap-2 flex-shrink-0 ml-4">
                                <span className="font-bold text-primary text-lg">{(item as any).overallScore}</span>
                                <Button size="sm" variant="ghost" onClick={() => setFeedback(item)}>
                                    {t.viewResult}
                                </Button>
                             </div>
                           </div>
                        ))}
                      </div>
                    ) : (
                      <p className="text-center text-sm text-muted-foreground py-8">{t.noPastResults}</p>
                    )}
                  </ScrollArea>
                </CardContent>
              </Card>
            </div>

            <div className="lg:col-span-3">
              <Card className="h-full flex flex-col">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2"><span className="flex items-center justify-center w-6 h-6 bg-primary text-primary-foreground rounded-full text-sm font-bold">2</span><span>{t.step2}</span></CardTitle>
                  <CardDescription>{t.step2Desc}</CardDescription>
                </CardHeader>
                <CardContent className="flex-grow flex items-center justify-center">

                  {isLoading && !feedback && (
                     <div className="text-center space-y-4">
                       <MascotLoading />
                       <h3 className="text-xl font-semibold text-primary">{t.analyzing}</h3>
                       <p className="text-muted-foreground">{t.analyzingDesc}</p>
                    </div>
                  )}

                  {!isLoading && !feedback && (
                    <div className="text-center space-y-4">
                      <Mascot />
                      <h3 className="text-xl font-semibold">{t.readyToStart}</h3>
                      <p className="text-muted-foreground max-w-sm mx-auto">{t.readyToStartDesc}</p>
                    </div>
                  )}
                  
                  {feedback && (
                   <div className="w-full grid grid-cols-1 md:grid-cols-2 gap-6">
                     <div className="flex flex-col gap-6">
                        <Card>
                          <CardHeader>
                              <CardTitle className="text-lg">{t.overallScore}</CardTitle>
                          </CardHeader>
                          <CardContent className="flex items-center justify-center">
                              <OverallScoreIndicator score={feedback.overallScore} />
                          </CardContent>
                        </Card>
                        <Card className="flex-grow">
                          <CardHeader>
                              <CardTitle className="text-lg">{t.detailedScores}</CardTitle>
                          </CardHeader>
                          <CardContent className="space-y-4">
                              <ScoreDisplay score={feedback.rapportScore} label={t.rapport} />
                              <ScoreDisplay score={feedback.organisationScore} label={t.organisation} />
                              <ScoreDisplay score={feedback.deliveryScore} label={t.delivery} />
                              <ScoreDisplay score={feedback.languageUseScore} label={t.languageUse} />
                              <ScoreDisplay score={feedback.creativityScore} label={t.creativity} />
                          </CardContent>
                        </Card>
                     </div>
                     <div className="flex flex-col gap-6">
                        <Card>
                          <CardHeader><CardTitle className="text-lg">{t.transcript}</CardTitle></CardHeader>
                          <CardContent>
                            <ScrollArea className="h-28">
                                <p className="italic text-muted-foreground">{feedback.transcribedText}</p>
                            </ScrollArea>
                          </CardContent>
                        </Card>
                        <Card className="flex-grow">
                          <CardHeader><CardTitle className="text-lg">{t.improvementAreas}</CardTitle></CardHeader>
                          <CardContent>
                             <Tabs defaultValue="overall" className="w-full">
                              <TabsList className="grid w-full grid-cols-2">
                                  <TabsTrigger value="overall">{t.overallFeedback}</TabsTrigger>
                                  <TabsTrigger value="details">{t.detailedAnalysis}</TabsTrigger>
                              </TabsList>
                               <ScrollArea className="h-56 mt-4">
                                  <TabsContent value="overall">
                                      <p className="text-sm">{feedback.overallFeedback}</p>
                                  </TabsContent>
                                  <TabsContent value="details">
                                      <div className="space-y-4 text-sm">
                                        <div><h4 className="font-semibold">{t.rapport}</h4><p className="text-muted-foreground">{feedback.rapportFeedback}</p></div>
                                        <div><h4 className="font-semibold">{t.organisation}</h4><p className="text-muted-foreground">{feedback.organisationFeedback}</p></div>
                                        <div><h4 className="font-semibold">{t.delivery}</h4><p className="text-muted-foreground">{feedback.deliveryFeedback}</p></div>
                                        <div><h4 className="font-semibold">{t.languageUse}</h4><p className="text-muted-foreground">{feedback.languageUseFeedback}</p></div>
                                        <div><h4 className="font-semibold">{t.creativity}</h4><p className="text-muted-foreground">{feedback.creativityFeedback}</p></div>
                                      </div>
                                  </TabsContent>
                                </ScrollArea>
                              </Tabs>
                          </CardContent>
                        </Card>
                     </div>
                   </div>
                )}
                </CardContent>
              </Card>
            </div>
          </div>
        )}
      </main>

      <footer className="bg-card mt-12 border-t">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8 text-center md:text-left">
                <div>
                    <h3 className="font-semibold text-foreground mb-4 flex items-center justify-center md:justify-start gap-2"><Atom className="w-5 h-5 text-primary"/> {t.tubitak}</h3>
                    <p className="text-sm text-muted-foreground">{t.tubitakDesc}</p>
                </div>
                <div>
                    <h3 className="font-semibold text-foreground mb-4 flex items-center justify-center md:justify-start gap-2"><Building className="w-5 h-5 text-primary"/> {t.supporters}</h3>
                     <div className="flex justify-center md:justify-start gap-6 items-center">
                        <a href="https://www.meb.gov.tr/" target="_blank" rel="noopener noreferrer" className="text-muted-foreground hover:opacity-80">
                           <Image src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/cc/Milli_E%C4%9Fitim_Bakanl%C4%B1%C4%9F%C4%B1_Logo.svg/1200px-Milli_E%C4%9Fitim_Bakanl%C4%B1%C4%9F%C4%B1_Logo.svg.png" alt="Milli Eğitim Bakanlığı Logo" width={80} height={80} />
                        </a>
                        <a href="https://www.tubitak.gov.tr/" target="_blank" rel="noopener noreferrer" className="text-muted-foreground hover:opacity-80">
                           <Image src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/05/T%C3%9CB%C4%B0TAK_logo.svg/1848px-T%C3%9CB%C4%B0TAK_logo.svg.png" alt="TÜBİTAK Logo" width={140} height={40} />
                        </a>
                    </div>
                </div>
                <div>
                    <h3 className="font-semibold text-foreground mb-4 flex items-center justify-center md:justify-start gap-2"><LinkIcon className="w-5 h-5 text-primary"/>{t.usefulLinks}</h3>
                    <div className="flex flex-col items-center md:items-start space-y-2">
                        <div className="flex justify-center md:justify-start gap-4 mb-2">
                            <a href="https://www.instagram.com/k.azizsancar_al/" target="_blank" rel="noopener noreferrer" className="text-muted-foreground hover:text-primary"><Image src="https://img.icons8.com/fluent/48/000000/instagram-new.png" width={24} height={24} alt="Instagram" /></a>
                            <a href="https://x.com/ka_sancar_al" target="_blank" rel="noopener noreferrer" className="text-muted-foreground hover:text-primary"><Image src="https://img.icons8.com/fluent/48/000000/twitterx.png" width={24} height={24} alt="Twitter" /></a>
                            <a href="https://www.youtube.com/@KapakliAzizSancarAL" target="_blank" rel="noopener noreferrer" className="text-muted-foreground hover:text-primary"><Image src="https://img.icons8.com/fluent/48/000000/youtube-play.png" width={24} height={24} alt="Youtube" /></a>
                        </div>
                        <a href="https://kapakli.meb.gov.tr/" target="_blank" rel="noopener noreferrer" className="text-sm text-muted-foreground hover:text-primary hover:underline">
                            {t.kapakliMeb}
                        </a>
                    </div>
                </div>
            </div>
             <div className="border-t mt-8 pt-6 text-center text-muted-foreground">
                <p className="text-sm">&copy; {new Date().getFullYear()} {t.title}. {t.footerRights}</p>
            </div>
        </div>
      </footer>
    </div>
  );
}

    